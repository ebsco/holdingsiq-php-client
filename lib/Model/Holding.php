<?php
/**
 * Holding
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* EBSCO HoldingsIQ
 *
* The EBSCO HoldingsIQ service retrieves vendor, package and title related information in JSON format.  The information includes customer selected resources as reflected in the EBSCO Knowledge Base for both EBSCO managed and customer managed resources.
 *
* OpenAPI spec version: 1.0.0
 * Contact: support@ebsco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Holding Class Doc Comment
 *
 * @category Class
 * @description Holding
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Holding implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'holding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'publication_title' => 'string',
'print_identifier' => 'string',
'online_identifier' => 'string',
'date_first_issue_online' => 'string',
'num_first_vol_online' => 'string',
'num_first_issue_online' => 'string',
'date_last_issue_online' => 'string',
'num_last_vol_online' => 'string',
'num_last_issue_online' => 'string',
'title_url' => 'string',
'first_author' => 'string',
'title_id' => 'string',
'embargo_info' => 'string',
'coverage_depth' => 'string',
'notes' => 'string',
'publisher_name' => 'string',
'publication_type' => 'string',
'date_monograph_published_print' => 'string',
'date_monograph_published_online' => 'string',
'monograph_volume' => 'string',
'monograph_edition' => 'string',
'first_editor' => 'string',
'parent_publication_title_id' => 'string',
'preceding_publication_title_id' => 'string',
'access_type' => 'string',
'package_name' => 'string',
'package_id' => 'string',
'vendor_name' => 'string',
'vendor_id' => 'int',
'resource_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'publication_title' => null,
'print_identifier' => null,
'online_identifier' => null,
'date_first_issue_online' => null,
'num_first_vol_online' => null,
'num_first_issue_online' => null,
'date_last_issue_online' => null,
'num_last_vol_online' => null,
'num_last_issue_online' => null,
'title_url' => null,
'first_author' => null,
'title_id' => null,
'embargo_info' => null,
'coverage_depth' => null,
'notes' => null,
'publisher_name' => null,
'publication_type' => null,
'date_monograph_published_print' => null,
'date_monograph_published_online' => null,
'monograph_volume' => null,
'monograph_edition' => null,
'first_editor' => null,
'parent_publication_title_id' => null,
'preceding_publication_title_id' => null,
'access_type' => null,
'package_name' => null,
'package_id' => null,
'vendor_name' => null,
'vendor_id' => null,
'resource_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'publication_title' => 'publication_title',
'print_identifier' => 'print_identifier',
'online_identifier' => 'online_identifier',
'date_first_issue_online' => 'date_first_issue_online',
'num_first_vol_online' => 'num_first_vol_online',
'num_first_issue_online' => 'num_first_issue_online',
'date_last_issue_online' => 'date_last_issue_online',
'num_last_vol_online' => 'num_last_vol_online',
'num_last_issue_online' => 'num_last_issue_online',
'title_url' => 'title_url',
'first_author' => 'first_author',
'title_id' => 'title_id',
'embargo_info' => 'embargo_info',
'coverage_depth' => 'coverage_depth',
'notes' => 'notes',
'publisher_name' => 'publisher_name',
'publication_type' => 'publication_type',
'date_monograph_published_print' => 'date_monograph_published_print',
'date_monograph_published_online' => 'date_monograph_published_online',
'monograph_volume' => 'monograph_volume',
'monograph_edition' => 'monograph_edition',
'first_editor' => 'first_editor',
'parent_publication_title_id' => 'parent_publication_title_id',
'preceding_publication_title_id' => 'preceding_publication_title_id',
'access_type' => 'access_type',
'package_name' => 'package_name',
'package_id' => 'package_id',
'vendor_name' => 'vendor_name',
'vendor_id' => 'vendor_id',
'resource_type' => 'resource_type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'publication_title' => 'setPublicationTitle',
'print_identifier' => 'setPrintIdentifier',
'online_identifier' => 'setOnlineIdentifier',
'date_first_issue_online' => 'setDateFirstIssueOnline',
'num_first_vol_online' => 'setNumFirstVolOnline',
'num_first_issue_online' => 'setNumFirstIssueOnline',
'date_last_issue_online' => 'setDateLastIssueOnline',
'num_last_vol_online' => 'setNumLastVolOnline',
'num_last_issue_online' => 'setNumLastIssueOnline',
'title_url' => 'setTitleUrl',
'first_author' => 'setFirstAuthor',
'title_id' => 'setTitleId',
'embargo_info' => 'setEmbargoInfo',
'coverage_depth' => 'setCoverageDepth',
'notes' => 'setNotes',
'publisher_name' => 'setPublisherName',
'publication_type' => 'setPublicationType',
'date_monograph_published_print' => 'setDateMonographPublishedPrint',
'date_monograph_published_online' => 'setDateMonographPublishedOnline',
'monograph_volume' => 'setMonographVolume',
'monograph_edition' => 'setMonographEdition',
'first_editor' => 'setFirstEditor',
'parent_publication_title_id' => 'setParentPublicationTitleId',
'preceding_publication_title_id' => 'setPrecedingPublicationTitleId',
'access_type' => 'setAccessType',
'package_name' => 'setPackageName',
'package_id' => 'setPackageId',
'vendor_name' => 'setVendorName',
'vendor_id' => 'setVendorId',
'resource_type' => 'setResourceType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'publication_title' => 'getPublicationTitle',
'print_identifier' => 'getPrintIdentifier',
'online_identifier' => 'getOnlineIdentifier',
'date_first_issue_online' => 'getDateFirstIssueOnline',
'num_first_vol_online' => 'getNumFirstVolOnline',
'num_first_issue_online' => 'getNumFirstIssueOnline',
'date_last_issue_online' => 'getDateLastIssueOnline',
'num_last_vol_online' => 'getNumLastVolOnline',
'num_last_issue_online' => 'getNumLastIssueOnline',
'title_url' => 'getTitleUrl',
'first_author' => 'getFirstAuthor',
'title_id' => 'getTitleId',
'embargo_info' => 'getEmbargoInfo',
'coverage_depth' => 'getCoverageDepth',
'notes' => 'getNotes',
'publisher_name' => 'getPublisherName',
'publication_type' => 'getPublicationType',
'date_monograph_published_print' => 'getDateMonographPublishedPrint',
'date_monograph_published_online' => 'getDateMonographPublishedOnline',
'monograph_volume' => 'getMonographVolume',
'monograph_edition' => 'getMonographEdition',
'first_editor' => 'getFirstEditor',
'parent_publication_title_id' => 'getParentPublicationTitleId',
'preceding_publication_title_id' => 'getPrecedingPublicationTitleId',
'access_type' => 'getAccessType',
'package_name' => 'getPackageName',
'package_id' => 'getPackageId',
'vendor_name' => 'getVendorName',
'vendor_id' => 'getVendorId',
'resource_type' => 'getResourceType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['publication_title'] = isset($data['publication_title']) ? $data['publication_title'] : null;
        $this->container['print_identifier'] = isset($data['print_identifier']) ? $data['print_identifier'] : null;
        $this->container['online_identifier'] = isset($data['online_identifier']) ? $data['online_identifier'] : null;
        $this->container['date_first_issue_online'] = isset($data['date_first_issue_online']) ? $data['date_first_issue_online'] : null;
        $this->container['num_first_vol_online'] = isset($data['num_first_vol_online']) ? $data['num_first_vol_online'] : null;
        $this->container['num_first_issue_online'] = isset($data['num_first_issue_online']) ? $data['num_first_issue_online'] : null;
        $this->container['date_last_issue_online'] = isset($data['date_last_issue_online']) ? $data['date_last_issue_online'] : null;
        $this->container['num_last_vol_online'] = isset($data['num_last_vol_online']) ? $data['num_last_vol_online'] : null;
        $this->container['num_last_issue_online'] = isset($data['num_last_issue_online']) ? $data['num_last_issue_online'] : null;
        $this->container['title_url'] = isset($data['title_url']) ? $data['title_url'] : null;
        $this->container['first_author'] = isset($data['first_author']) ? $data['first_author'] : null;
        $this->container['title_id'] = isset($data['title_id']) ? $data['title_id'] : null;
        $this->container['embargo_info'] = isset($data['embargo_info']) ? $data['embargo_info'] : null;
        $this->container['coverage_depth'] = isset($data['coverage_depth']) ? $data['coverage_depth'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['publisher_name'] = isset($data['publisher_name']) ? $data['publisher_name'] : null;
        $this->container['publication_type'] = isset($data['publication_type']) ? $data['publication_type'] : null;
        $this->container['date_monograph_published_print'] = isset($data['date_monograph_published_print']) ? $data['date_monograph_published_print'] : null;
        $this->container['date_monograph_published_online'] = isset($data['date_monograph_published_online']) ? $data['date_monograph_published_online'] : null;
        $this->container['monograph_volume'] = isset($data['monograph_volume']) ? $data['monograph_volume'] : null;
        $this->container['monograph_edition'] = isset($data['monograph_edition']) ? $data['monograph_edition'] : null;
        $this->container['first_editor'] = isset($data['first_editor']) ? $data['first_editor'] : null;
        $this->container['parent_publication_title_id'] = isset($data['parent_publication_title_id']) ? $data['parent_publication_title_id'] : null;
        $this->container['preceding_publication_title_id'] = isset($data['preceding_publication_title_id']) ? $data['preceding_publication_title_id'] : null;
        $this->container['access_type'] = isset($data['access_type']) ? $data['access_type'] : null;
        $this->container['package_name'] = isset($data['package_name']) ? $data['package_name'] : null;
        $this->container['package_id'] = isset($data['package_id']) ? $data['package_id'] : null;
        $this->container['vendor_name'] = isset($data['vendor_name']) ? $data['vendor_name'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['resource_type'] = isset($data['resource_type']) ? $data['resource_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['publication_title'] === null) {
            $invalidProperties[] = "'publication_title' can't be null";
        }
        if ($this->container['print_identifier'] === null) {
            $invalidProperties[] = "'print_identifier' can't be null";
        }
        if ($this->container['online_identifier'] === null) {
            $invalidProperties[] = "'online_identifier' can't be null";
        }
        if ($this->container['date_first_issue_online'] === null) {
            $invalidProperties[] = "'date_first_issue_online' can't be null";
        }
        if ($this->container['num_first_vol_online'] === null) {
            $invalidProperties[] = "'num_first_vol_online' can't be null";
        }
        if ($this->container['num_first_issue_online'] === null) {
            $invalidProperties[] = "'num_first_issue_online' can't be null";
        }
        if ($this->container['date_last_issue_online'] === null) {
            $invalidProperties[] = "'date_last_issue_online' can't be null";
        }
        if ($this->container['num_last_vol_online'] === null) {
            $invalidProperties[] = "'num_last_vol_online' can't be null";
        }
        if ($this->container['num_last_issue_online'] === null) {
            $invalidProperties[] = "'num_last_issue_online' can't be null";
        }
        if ($this->container['title_url'] === null) {
            $invalidProperties[] = "'title_url' can't be null";
        }
        if ($this->container['first_author'] === null) {
            $invalidProperties[] = "'first_author' can't be null";
        }
        if ($this->container['title_id'] === null) {
            $invalidProperties[] = "'title_id' can't be null";
        }
        if ($this->container['embargo_info'] === null) {
            $invalidProperties[] = "'embargo_info' can't be null";
        }
        if ($this->container['coverage_depth'] === null) {
            $invalidProperties[] = "'coverage_depth' can't be null";
        }
        if ($this->container['notes'] === null) {
            $invalidProperties[] = "'notes' can't be null";
        }
        if ($this->container['publisher_name'] === null) {
            $invalidProperties[] = "'publisher_name' can't be null";
        }
        if ($this->container['publication_type'] === null) {
            $invalidProperties[] = "'publication_type' can't be null";
        }
        if ($this->container['date_monograph_published_print'] === null) {
            $invalidProperties[] = "'date_monograph_published_print' can't be null";
        }
        if ($this->container['date_monograph_published_online'] === null) {
            $invalidProperties[] = "'date_monograph_published_online' can't be null";
        }
        if ($this->container['monograph_volume'] === null) {
            $invalidProperties[] = "'monograph_volume' can't be null";
        }
        if ($this->container['monograph_edition'] === null) {
            $invalidProperties[] = "'monograph_edition' can't be null";
        }
        if ($this->container['first_editor'] === null) {
            $invalidProperties[] = "'first_editor' can't be null";
        }
        if ($this->container['parent_publication_title_id'] === null) {
            $invalidProperties[] = "'parent_publication_title_id' can't be null";
        }
        if ($this->container['preceding_publication_title_id'] === null) {
            $invalidProperties[] = "'preceding_publication_title_id' can't be null";
        }
        if ($this->container['access_type'] === null) {
            $invalidProperties[] = "'access_type' can't be null";
        }
        if ($this->container['package_name'] === null) {
            $invalidProperties[] = "'package_name' can't be null";
        }
        if ($this->container['package_id'] === null) {
            $invalidProperties[] = "'package_id' can't be null";
        }
        if ($this->container['vendor_name'] === null) {
            $invalidProperties[] = "'vendor_name' can't be null";
        }
        if ($this->container['vendor_id'] === null) {
            $invalidProperties[] = "'vendor_id' can't be null";
        }
        if ($this->container['resource_type'] === null) {
            $invalidProperties[] = "'resource_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['publication_title'] === null) {
            return false;
        }
        if ($this->container['print_identifier'] === null) {
            return false;
        }
        if ($this->container['online_identifier'] === null) {
            return false;
        }
        if ($this->container['date_first_issue_online'] === null) {
            return false;
        }
        if ($this->container['num_first_vol_online'] === null) {
            return false;
        }
        if ($this->container['num_first_issue_online'] === null) {
            return false;
        }
        if ($this->container['date_last_issue_online'] === null) {
            return false;
        }
        if ($this->container['num_last_vol_online'] === null) {
            return false;
        }
        if ($this->container['num_last_issue_online'] === null) {
            return false;
        }
        if ($this->container['title_url'] === null) {
            return false;
        }
        if ($this->container['first_author'] === null) {
            return false;
        }
        if ($this->container['title_id'] === null) {
            return false;
        }
        if ($this->container['embargo_info'] === null) {
            return false;
        }
        if ($this->container['coverage_depth'] === null) {
            return false;
        }
        if ($this->container['notes'] === null) {
            return false;
        }
        if ($this->container['publisher_name'] === null) {
            return false;
        }
        if ($this->container['publication_type'] === null) {
            return false;
        }
        if ($this->container['date_monograph_published_print'] === null) {
            return false;
        }
        if ($this->container['date_monograph_published_online'] === null) {
            return false;
        }
        if ($this->container['monograph_volume'] === null) {
            return false;
        }
        if ($this->container['monograph_edition'] === null) {
            return false;
        }
        if ($this->container['first_editor'] === null) {
            return false;
        }
        if ($this->container['parent_publication_title_id'] === null) {
            return false;
        }
        if ($this->container['preceding_publication_title_id'] === null) {
            return false;
        }
        if ($this->container['access_type'] === null) {
            return false;
        }
        if ($this->container['package_name'] === null) {
            return false;
        }
        if ($this->container['package_id'] === null) {
            return false;
        }
        if ($this->container['vendor_name'] === null) {
            return false;
        }
        if ($this->container['vendor_id'] === null) {
            return false;
        }
        if ($this->container['resource_type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets publication_title
     *
     * @return string
     */
    public function getPublicationTitle()
    {
        return $this->container['publication_title'];
    }

    /**
     * Sets publication_title
     *
     * @param string $publication_title Title of the serial or monograph being represented.  Conference proceedings serial title should be entered as a serial title, while conference proceeding volume titles should be entered as a monograph title.
     *
     * @return $this
     */
    public function setPublicationTitle($publication_title)
    {
        $this->container['publication_title'] = $publication_title;

        return $this;
    }

    /**
     * Gets print_identifier
     *
     * @return string
     */
    public function getPrintIdentifier()
    {
        return $this->container['print_identifier'];
    }

    /**
     * Sets print_identifier
     *
     * @param string $print_identifier ISSN or ISBN of the print version of the work.  Note: If the item is a book and has both an ISBN and ISSN, use ISBN.
     *
     * @return $this
     */
    public function setPrintIdentifier($print_identifier)
    {
        $this->container['print_identifier'] = $print_identifier;

        return $this;
    }

    /**
     * Gets online_identifier
     *
     * @return string
     */
    public function getOnlineIdentifier()
    {
        return $this->container['online_identifier'];
    }

    /**
     * Sets online_identifier
     *
     * @param string $online_identifier ISSN or ISBN of the online version of work. Note:  If item is a book and has both an ISBN and ISSN, use the ISBN.
     *
     * @return $this
     */
    public function setOnlineIdentifier($online_identifier)
    {
        $this->container['online_identifier'] = $online_identifier;

        return $this;
    }

    /**
     * Gets date_first_issue_online
     *
     * @return string
     */
    public function getDateFirstIssueOnline()
    {
        return $this->container['date_first_issue_online'];
    }

    /**
     * Sets date_first_issue_online
     *
     * @param string $date_first_issue_online The publication date of the earliest serial issue available online in the format of yyyy-mm-dd. Applicable only to serials.
     *
     * @return $this
     */
    public function setDateFirstIssueOnline($date_first_issue_online)
    {
        $this->container['date_first_issue_online'] = $date_first_issue_online;

        return $this;
    }

    /**
     * Gets num_first_vol_online
     *
     * @return string
     */
    public function getNumFirstVolOnline()
    {
        return $this->container['num_first_vol_online'];
    }

    /**
     * Sets num_first_vol_online
     *
     * @param string $num_first_vol_online The volume number of the earliest serial issue available online. Applicable only to serials.
     *
     * @return $this
     */
    public function setNumFirstVolOnline($num_first_vol_online)
    {
        $this->container['num_first_vol_online'] = $num_first_vol_online;

        return $this;
    }

    /**
     * Gets num_first_issue_online
     *
     * @return string
     */
    public function getNumFirstIssueOnline()
    {
        return $this->container['num_first_issue_online'];
    }

    /**
     * Sets num_first_issue_online
     *
     * @param string $num_first_issue_online The issue number of the earliest serial issue available online. Applicable only to serials.
     *
     * @return $this
     */
    public function setNumFirstIssueOnline($num_first_issue_online)
    {
        $this->container['num_first_issue_online'] = $num_first_issue_online;

        return $this;
    }

    /**
     * Gets date_last_issue_online
     *
     * @return string
     */
    public function getDateLastIssueOnline()
    {
        return $this->container['date_last_issue_online'];
    }

    /**
     * Sets date_last_issue_online
     *
     * @param string $date_last_issue_online Date of the latest serial issue available online. Leave blank if coverage is to present. Applicable only to serials.
     *
     * @return $this
     */
    public function setDateLastIssueOnline($date_last_issue_online)
    {
        $this->container['date_last_issue_online'] = $date_last_issue_online;

        return $this;
    }

    /**
     * Gets num_last_vol_online
     *
     * @return string
     */
    public function getNumLastVolOnline()
    {
        return $this->container['num_last_vol_online'];
    }

    /**
     * Sets num_last_vol_online
     *
     * @param string $num_last_vol_online The volume number of the latest serial issue available online. Leave blank if coverage is to present. Applicable only to serials.
     *
     * @return $this
     */
    public function setNumLastVolOnline($num_last_vol_online)
    {
        $this->container['num_last_vol_online'] = $num_last_vol_online;

        return $this;
    }

    /**
     * Gets num_last_issue_online
     *
     * @return string
     */
    public function getNumLastIssueOnline()
    {
        return $this->container['num_last_issue_online'];
    }

    /**
     * Sets num_last_issue_online
     *
     * @param string $num_last_issue_online The issue number of the latest serial issue available online. Leave blank if coverage is to present. Applicable only to serials.
     *
     * @return $this
     */
    public function setNumLastIssueOnline($num_last_issue_online)
    {
        $this->container['num_last_issue_online'] = $num_last_issue_online;

        return $this;
    }

    /**
     * Gets title_url
     *
     * @return string
     */
    public function getTitleUrl()
    {
        return $this->container['title_url'];
    }

    /**
     * Sets title_url
     *
     * @param string $title_url Title-level URL. Applicable to both monographs and serials. For conference proceeding, the title_url for the series and the title_url for each volume should be different.
     *
     * @return $this
     */
    public function setTitleUrl($title_url)
    {
        $this->container['title_url'] = $title_url;

        return $this;
    }

    /**
     * Gets first_author
     *
     * @return string
     */
    public function getFirstAuthor()
    {
        return $this->container['first_author'];
    }

    /**
     * Sets first_author
     *
     * @param string $first_author First author of the monograph. Applicable only to monographs.
     *
     * @return $this
     */
    public function setFirstAuthor($first_author)
    {
        $this->container['first_author'] = $first_author;

        return $this;
    }

    /**
     * Gets title_id
     *
     * @return string
     */
    public function getTitleId()
    {
        return $this->container['title_id'];
    }

    /**
     * Sets title_id
     *
     * @param string $title_id The unique identifier for the title. This is the report provider's proprietary identifier.
     *
     * @return $this
     */
    public function setTitleId($title_id)
    {
        $this->container['title_id'] = $title_id;

        return $this;
    }

    /**
     * Gets embargo_info
     *
     * @return string
     */
    public function getEmbargoInfo()
    {
        return $this->container['embargo_info'];
    }

    /**
     * Sets embargo_info
     *
     * @param string $embargo_info Embargo information as a coded string following rules in section 6.6.14 of the KBART recommended practice (i.e. 'P1Y' means an embargo is period of 1 year.)
     *
     * @return $this
     */
    public function setEmbargoInfo($embargo_info)
    {
        $this->container['embargo_info'] = $embargo_info;

        return $this;
    }

    /**
     * Gets coverage_depth
     *
     * @return string
     */
    public function getCoverageDepth()
    {
        return $this->container['coverage_depth'];
    }

    /**
     * Sets coverage_depth
     *
     * @param string $coverage_depth Coverage depth is defined in 6.6.15 of the KBART recommended practice. Multiple coverage depths can be specified with a semicolon to delimit values.
     *
     * @return $this
     */
    public function setCoverageDepth($coverage_depth)
    {
        $this->container['coverage_depth'] = $coverage_depth;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Free text field to describe the specifics of the coverage policy.
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets publisher_name
     *
     * @return string
     */
    public function getPublisherName()
    {
        return $this->container['publisher_name'];
    }

    /**
     * Sets publisher_name
     *
     * @param string $publisher_name Name of the publisher of the work. Not to be confused with the name of the hosting platform.
     *
     * @return $this
     */
    public function setPublisherName($publisher_name)
    {
        $this->container['publisher_name'] = $publisher_name;

        return $this;
    }

    /**
     * Gets publication_type
     *
     * @return string
     */
    public function getPublicationType()
    {
        return $this->container['publication_type'];
    }

    /**
     * Sets publication_type
     *
     * @param string $publication_type Serial or Monograph. Use 'serial' for journals, book series and conference proceeding series. Use 'monograph' for books and individual conference proceeding volumes.
     *
     * @return $this
     */
    public function setPublicationType($publication_type)
    {
        $this->container['publication_type'] = $publication_type;

        return $this;
    }

    /**
     * Gets date_monograph_published_print
     *
     * @return string
     */
    public function getDateMonographPublishedPrint()
    {
        return $this->container['date_monograph_published_print'];
    }

    /**
     * Sets date_monograph_published_print
     *
     * @param string $date_monograph_published_print Date the monograph was first published in print. Applies to monographs only.
     *
     * @return $this
     */
    public function setDateMonographPublishedPrint($date_monograph_published_print)
    {
        $this->container['date_monograph_published_print'] = $date_monograph_published_print;

        return $this;
    }

    /**
     * Gets date_monograph_published_online
     *
     * @return string
     */
    public function getDateMonographPublishedOnline()
    {
        return $this->container['date_monograph_published_online'];
    }

    /**
     * Sets date_monograph_published_online
     *
     * @param string $date_monograph_published_online Date the monograph was first published online. Applies to monographs only.
     *
     * @return $this
     */
    public function setDateMonographPublishedOnline($date_monograph_published_online)
    {
        $this->container['date_monograph_published_online'] = $date_monograph_published_online;

        return $this;
    }

    /**
     * Gets monograph_volume
     *
     * @return string
     */
    public function getMonographVolume()
    {
        return $this->container['monograph_volume'];
    }

    /**
     * Sets monograph_volume
     *
     * @param string $monograph_volume Number of the particular volume of the monograph. Applicable to ebooks and conference proceedings. For conference proceedings, use the volume within the conference proceedings series.
     *
     * @return $this
     */
    public function setMonographVolume($monograph_volume)
    {
        $this->container['monograph_volume'] = $monograph_volume;

        return $this;
    }

    /**
     * Gets monograph_edition
     *
     * @return string
     */
    public function getMonographEdition()
    {
        return $this->container['monograph_edition'];
    }

    /**
     * Sets monograph_edition
     *
     * @param string $monograph_edition Edition of the monograph.
     *
     * @return $this
     */
    public function setMonographEdition($monograph_edition)
    {
        $this->container['monograph_edition'] = $monograph_edition;

        return $this;
    }

    /**
     * Gets first_editor
     *
     * @return string
     */
    public function getFirstEditor()
    {
        return $this->container['first_editor'];
    }

    /**
     * Sets first_editor
     *
     * @param string $first_editor First editor. Applicable to monographs only.
     *
     * @return $this
     */
    public function setFirstEditor($first_editor)
    {
        $this->container['first_editor'] = $first_editor;

        return $this;
    }

    /**
     * Gets parent_publication_title_id
     *
     * @return string
     */
    public function getParentPublicationTitleId()
    {
        return $this->container['parent_publication_title_id'];
    }

    /**
     * Sets parent_publication_title_id
     *
     * @param string $parent_publication_title_id Title identifier of the parent publication. For a conference proceeding, this would be the title_id of the overall conference proceeding series.
     *
     * @return $this
     */
    public function setParentPublicationTitleId($parent_publication_title_id)
    {
        $this->container['parent_publication_title_id'] = $parent_publication_title_id;

        return $this;
    }

    /**
     * Gets preceding_publication_title_id
     *
     * @return string
     */
    public function getPrecedingPublicationTitleId()
    {
        return $this->container['preceding_publication_title_id'];
    }

    /**
     * Sets preceding_publication_title_id
     *
     * @param string $preceding_publication_title_id The title identifier of any preceding publication title for serials and conference proceeding serials.  The publisher's proprietary identifier should be used where it exists.
     *
     * @return $this
     */
    public function setPrecedingPublicationTitleId($preceding_publication_title_id)
    {
        $this->container['preceding_publication_title_id'] = $preceding_publication_title_id;

        return $this;
    }

    /**
     * Gets access_type
     *
     * @return string
     */
    public function getAccessType()
    {
        return $this->container['access_type'];
    }

    /**
     * Sets access_type
     *
     * @param string $access_type Indicates if the content in the journal is F-Free, P-Paid, H-Hybrid, PF-Paid then Free after embargo period.  The default is P-Paid.
     *
     * @return $this
     */
    public function setAccessType($access_type)
    {
        $this->container['access_type'] = $access_type;

        return $this;
    }

    /**
     * Gets package_name
     *
     * @return string
     */
    public function getPackageName()
    {
        return $this->container['package_name'];
    }

    /**
     * Sets package_name
     *
     * @param string $package_name Name of the package or full text database this title is part of. This should match the name of the same package as it appears in the KBARTManifest.
     *
     * @return $this
     */
    public function setPackageName($package_name)
    {
        $this->container['package_name'] = $package_name;

        return $this;
    }

    /**
     * Gets package_id
     *
     * @return string
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param string $package_id The provider's identifier for the package or full text database this title is part of. This should match the package_id of the same package as it appears in the KBARTManifest.
     *
     * @return $this
     */
    public function setPackageId($package_id)
    {
        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets vendor_name
     *
     * @return string
     */
    public function getVendorName()
    {
        return $this->container['vendor_name'];
    }

    /**
     * Sets vendor_name
     *
     * @param string $vendor_name Provider Name
     *
     * @return $this
     */
    public function setVendorName($vendor_name)
    {
        $this->container['vendor_name'] = $vendor_name;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int $vendor_id EBSCO KB's unique identifier for the provider.
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets resource_type
     *
     * @return string
     */
    public function getResourceType()
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param string $resource_type EBSCO's Resource_Type in textual form.
     *
     * @return $this
     */
    public function setResourceType($resource_type)
    {
        $this->container['resource_type'] = $resource_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
