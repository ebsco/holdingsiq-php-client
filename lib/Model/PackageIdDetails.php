<?php
/**
 * PackageIdDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* EBSCO HoldingsIQ
 *
* The EBSCO HoldingsIQ service retrieves vendor, package and title related information in JSON format.  The information includes customer selected resources as reflected in the EBSCO Knowledge Base for both EBSCO managed and customer managed resources.
 *
* OpenAPI spec version: 1.0.0
 * Contact: support@ebsco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PackageIdDetails Class Doc Comment
 *
 * @category Class
 * @description Package details from EPKB for a specific package ID.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PackageIdDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'packageIdDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'package_id' => 'int',
'package_name' => 'string',
'vendor_id' => 'int',
'vendor_name' => 'string',
'is_custom' => 'bool',
'title_count' => 'int',
'is_selected' => 'bool',
'selected_count' => 'int',
'content_type' => 'string',
'visibility_data' => '\Swagger\Client\Model\VisibilityInfo',
'custom_coverage' => '\Swagger\Client\Model\CoverageDates',
'is_token_needed' => 'bool',
'allow_ebsco_to_add_titles' => 'bool',
'package_type' => 'string',
'proxy' => '\Swagger\Client\Model\ProxyInfoIn',
'package_token' => '\Swagger\Client\Model\TokenInfo'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'package_id' => null,
'package_name' => null,
'vendor_id' => null,
'vendor_name' => null,
'is_custom' => null,
'title_count' => null,
'is_selected' => null,
'selected_count' => null,
'content_type' => null,
'visibility_data' => null,
'custom_coverage' => null,
'is_token_needed' => null,
'allow_ebsco_to_add_titles' => null,
'package_type' => null,
'proxy' => null,
'package_token' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'package_id' => 'packageId',
'package_name' => 'packageName',
'vendor_id' => 'vendorId',
'vendor_name' => 'vendorName',
'is_custom' => 'isCustom',
'title_count' => 'titleCount',
'is_selected' => 'isSelected',
'selected_count' => 'selectedCount',
'content_type' => 'contentType',
'visibility_data' => 'visibilityData',
'custom_coverage' => 'customCoverage',
'is_token_needed' => 'isTokenNeeded',
'allow_ebsco_to_add_titles' => 'allowEbscoToAddTitles',
'package_type' => 'packageType',
'proxy' => 'proxy',
'package_token' => 'packageToken'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'package_id' => 'setPackageId',
'package_name' => 'setPackageName',
'vendor_id' => 'setVendorId',
'vendor_name' => 'setVendorName',
'is_custom' => 'setIsCustom',
'title_count' => 'setTitleCount',
'is_selected' => 'setIsSelected',
'selected_count' => 'setSelectedCount',
'content_type' => 'setContentType',
'visibility_data' => 'setVisibilityData',
'custom_coverage' => 'setCustomCoverage',
'is_token_needed' => 'setIsTokenNeeded',
'allow_ebsco_to_add_titles' => 'setAllowEbscoToAddTitles',
'package_type' => 'setPackageType',
'proxy' => 'setProxy',
'package_token' => 'setPackageToken'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'package_id' => 'getPackageId',
'package_name' => 'getPackageName',
'vendor_id' => 'getVendorId',
'vendor_name' => 'getVendorName',
'is_custom' => 'getIsCustom',
'title_count' => 'getTitleCount',
'is_selected' => 'getIsSelected',
'selected_count' => 'getSelectedCount',
'content_type' => 'getContentType',
'visibility_data' => 'getVisibilityData',
'custom_coverage' => 'getCustomCoverage',
'is_token_needed' => 'getIsTokenNeeded',
'allow_ebsco_to_add_titles' => 'getAllowEbscoToAddTitles',
'package_type' => 'getPackageType',
'proxy' => 'getProxy',
'package_token' => 'getPackageToken'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['package_id'] = isset($data['package_id']) ? $data['package_id'] : null;
        $this->container['package_name'] = isset($data['package_name']) ? $data['package_name'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['vendor_name'] = isset($data['vendor_name']) ? $data['vendor_name'] : null;
        $this->container['is_custom'] = isset($data['is_custom']) ? $data['is_custom'] : null;
        $this->container['title_count'] = isset($data['title_count']) ? $data['title_count'] : null;
        $this->container['is_selected'] = isset($data['is_selected']) ? $data['is_selected'] : null;
        $this->container['selected_count'] = isset($data['selected_count']) ? $data['selected_count'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['visibility_data'] = isset($data['visibility_data']) ? $data['visibility_data'] : null;
        $this->container['custom_coverage'] = isset($data['custom_coverage']) ? $data['custom_coverage'] : null;
        $this->container['is_token_needed'] = isset($data['is_token_needed']) ? $data['is_token_needed'] : null;
        $this->container['allow_ebsco_to_add_titles'] = isset($data['allow_ebsco_to_add_titles']) ? $data['allow_ebsco_to_add_titles'] : null;
        $this->container['package_type'] = isset($data['package_type']) ? $data['package_type'] : null;
        $this->container['proxy'] = isset($data['proxy']) ? $data['proxy'] : null;
        $this->container['package_token'] = isset($data['package_token']) ? $data['package_token'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['package_id'] === null) {
            $invalidProperties[] = "'package_id' can't be null";
        }
        if ($this->container['package_name'] === null) {
            $invalidProperties[] = "'package_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['package_id'] === null) {
            return false;
        }
        if ($this->container['package_name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets package_id
     *
     * @return int
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param int $package_id EBSCO KB's unique identifier for the package.  In EPKB, this is 'PkgID'.
     *
     * @return $this
     */
    public function setPackageId($package_id)
    {
        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets package_name
     *
     * @return string
     */
    public function getPackageName()
    {
        return $this->container['package_name'];
    }

    /**
     * Sets package_name
     *
     * @param string $package_name Name of the Package. In EPKB, this is 'PkgName'.
     *
     * @return $this
     */
    public function setPackageName($package_name)
    {
        $this->container['package_name'] = $package_name;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int $vendor_id EBSCO KB's unique identifier for the provider.  In EPKB, this is 'VendorID'.
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets vendor_name
     *
     * @return string
     */
    public function getVendorName()
    {
        return $this->container['vendor_name'];
    }

    /**
     * Sets vendor_name
     *
     * @param string $vendor_name Provider name.  In EPKB, this is the 'VendorName'.
     *
     * @return $this
     */
    public function setVendorName($vendor_name)
    {
        $this->container['vendor_name'] = $vendor_name;

        return $this;
    }

    /**
     * Gets is_custom
     *
     * @return bool
     */
    public function getIsCustom()
    {
        return $this->container['is_custom'];
    }

    /**
     * Sets is_custom
     *
     * @param bool $is_custom IsCustom is true if a customer is the vendor.  The customer vendor is used for custom packages.
     *
     * @return $this
     */
    public function setIsCustom($is_custom)
    {
        $this->container['is_custom'] = $is_custom;

        return $this;
    }

    /**
     * Gets title_count
     *
     * @return int
     */
    public function getTitleCount()
    {
        return $this->container['title_count'];
    }

    /**
     * Sets title_count
     *
     * @param int $title_count Numeric value indicating the title count of the package.
     *
     * @return $this
     */
    public function setTitleCount($title_count)
    {
        $this->container['title_count'] = $title_count;

        return $this;
    }

    /**
     * Gets is_selected
     *
     * @return bool
     */
    public function getIsSelected()
    {
        return $this->container['is_selected'];
    }

    /**
     * Sets is_selected
     *
     * @param bool $is_selected Indicates if the packages is selected in a customer's account.
     *
     * @return $this
     */
    public function setIsSelected($is_selected)
    {
        $this->container['is_selected'] = $is_selected;

        return $this;
    }

    /**
     * Gets selected_count
     *
     * @return int
     */
    public function getSelectedCount()
    {
        return $this->container['selected_count'];
    }

    /**
     * Sets selected_count
     *
     * @param int $selected_count Numeric value indicating the number of titles in packages selected in the customer account.
     *
     * @return $this
     */
    public function setSelectedCount($selected_count)
    {
        $this->container['selected_count'] = $selected_count;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string $content_type Indicates the content type of the package.
     *
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets visibility_data
     *
     * @return \Swagger\Client\Model\VisibilityInfo
     */
    public function getVisibilityData()
    {
        return $this->container['visibility_data'];
    }

    /**
     * Sets visibility_data
     *
     * @param \Swagger\Client\Model\VisibilityInfo $visibility_data visibility_data
     *
     * @return $this
     */
    public function setVisibilityData($visibility_data)
    {
        $this->container['visibility_data'] = $visibility_data;

        return $this;
    }

    /**
     * Gets custom_coverage
     *
     * @return \Swagger\Client\Model\CoverageDates
     */
    public function getCustomCoverage()
    {
        return $this->container['custom_coverage'];
    }

    /**
     * Sets custom_coverage
     *
     * @param \Swagger\Client\Model\CoverageDates $custom_coverage custom_coverage
     *
     * @return $this
     */
    public function setCustomCoverage($custom_coverage)
    {
        $this->container['custom_coverage'] = $custom_coverage;

        return $this;
    }

    /**
     * Gets is_token_needed
     *
     * @return bool
     */
    public function getIsTokenNeeded()
    {
        return $this->container['is_token_needed'];
    }

    /**
     * Sets is_token_needed
     *
     * @param bool $is_token_needed Field to indicate if a token is needed
     *
     * @return $this
     */
    public function setIsTokenNeeded($is_token_needed)
    {
        $this->container['is_token_needed'] = $is_token_needed;

        return $this;
    }

    /**
     * Gets allow_ebsco_to_add_titles
     *
     * @return bool
     */
    public function getAllowEbscoToAddTitles()
    {
        return $this->container['allow_ebsco_to_add_titles'];
    }

    /**
     * Sets allow_ebsco_to_add_titles
     *
     * @param bool $allow_ebsco_to_add_titles Indicates if EBSCO is allowed to add titles.  If the package type is custom, then allowEbscoToAddTitles will always be set to false.
     *
     * @return $this
     */
    public function setAllowEbscoToAddTitles($allow_ebsco_to_add_titles)
    {
        $this->container['allow_ebsco_to_add_titles'] = $allow_ebsco_to_add_titles;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return string
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param string $package_type Package Type. Valid values are Selectable, Complete, Variable and Custom.
     *
     * @return $this
     */
    public function setPackageType($package_type)
    {
        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets proxy
     *
     * @return \Swagger\Client\Model\ProxyInfoIn
     */
    public function getProxy()
    {
        return $this->container['proxy'];
    }

    /**
     * Sets proxy
     *
     * @param \Swagger\Client\Model\ProxyInfoIn $proxy proxy
     *
     * @return $this
     */
    public function setProxy($proxy)
    {
        $this->container['proxy'] = $proxy;

        return $this;
    }

    /**
     * Gets package_token
     *
     * @return \Swagger\Client\Model\TokenInfo
     */
    public function getPackageToken()
    {
        return $this->container['package_token'];
    }

    /**
     * Sets package_token
     *
     * @param \Swagger\Client\Model\TokenInfo $package_token package_token
     *
     * @return $this
     */
    public function setPackageToken($package_token)
    {
        $this->container['package_token'] = $package_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
