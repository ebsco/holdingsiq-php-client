<?php
/**
 * VendorResourcesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* EBSCO HoldingsIQ
 *
* The EBSCO HoldingsIQ service retrieves vendor, package and title related information in JSON format.  The information includes customer selected resources as reflected in the EBSCO Knowledge Base for both EBSCO managed and customer managed resources.
 *
* OpenAPI spec version: 1.0.0
 * Contact: support@ebsco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * VendorResourcesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VendorResourcesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }
    /**
     * Operation custidVendorsGet
*
* @param  string $custid EBSCO Customer ID (required)
* @param  string $orderby Valid values are relevance and vendorname.  Default is relevance. (required)
* @param  int $count The maximum number of results to return in the response. (required)
* @param  int $offset Page Offset (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  string $search Search Term - When searching for vendors without a search parameter, sort options will be by vendorname.  When the search parameter is not null, the default sort is by relevance. (optional)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Vendors
     */
    public function custidVendorsGet($custid, $orderby, $count, $offset, $x_api_key, $search = null)
    {
        list($response) = $this->custidVendorsGetWithHttpInfo($custid, $orderby, $count, $offset, $x_api_key, $search);
        return $response;
    }

    /**
     * Operation custidVendorsGetWithHttpInfo
*
* @param  string $custid EBSCO Customer ID (required)
* @param  string $orderby Valid values are relevance and vendorname.  Default is relevance. (required)
* @param  int $count The maximum number of results to return in the response. (required)
* @param  int $offset Page Offset (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  string $search Search Term - When searching for vendors without a search parameter, sort options will be by vendorname.  When the search parameter is not null, the default sort is by relevance. (optional)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Vendors, HTTP status code, HTTP response headers (array of strings)
     */
    public function custidVendorsGetWithHttpInfo($custid, $orderby, $count, $offset, $x_api_key, $search = null)
    {
        $returnType = '\Swagger\Client\Model\Vendors';
        $request = $this->custidVendorsGetRequest($custid, $orderby, $count, $offset, $x_api_key, $search);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Swagger\Client\Model\Vendors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Swagger\Client\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation custidVendorsGetAsync
     *
     * 
     *
* @param  string $custid EBSCO Customer ID (required)
* @param  string $orderby Valid values are relevance and vendorname.  Default is relevance. (required)
* @param  int $count The maximum number of results to return in the response. (required)
* @param  int $offset Page Offset (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  string $search Search Term - When searching for vendors without a search parameter, sort options will be by vendorname.  When the search parameter is not null, the default sort is by relevance. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function custidVendorsGetAsync($custid, $orderby, $count, $offset, $x_api_key, $search = null)
    {
        return $this->custidVendorsGetAsyncWithHttpInfo($custid, $orderby, $count, $offset, $x_api_key, $search)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation custidVendorsGetAsyncWithHttpInfo
     *
     * 
     *
* @param  string $custid EBSCO Customer ID (required)
* @param  string $orderby Valid values are relevance and vendorname.  Default is relevance. (required)
* @param  int $count The maximum number of results to return in the response. (required)
* @param  int $offset Page Offset (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  string $search Search Term - When searching for vendors without a search parameter, sort options will be by vendorname.  When the search parameter is not null, the default sort is by relevance. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function custidVendorsGetAsyncWithHttpInfo($custid, $orderby, $count, $offset, $x_api_key, $search = null)
    {
        $returnType = '\Swagger\Client\Model\Vendors';
        $request = $this->custidVendorsGetRequest($custid, $orderby, $count, $offset, $x_api_key, $search);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'custidVendorsGet'
     *
* @param  string $custid EBSCO Customer ID (required)
* @param  string $orderby Valid values are relevance and vendorname.  Default is relevance. (required)
* @param  int $count The maximum number of results to return in the response. (required)
* @param  int $offset Page Offset (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  string $search Search Term - When searching for vendors without a search parameter, sort options will be by vendorname.  When the search parameter is not null, the default sort is by relevance. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function custidVendorsGetRequest($custid, $orderby, $count, $offset, $x_api_key, $search = null)
    {
// verify the required parameter 'custid' is set
        if ($custid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custid when calling custidVendorsGet'
            );
        }
// verify the required parameter 'orderby' is set
        if ($orderby === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderby when calling custidVendorsGet'
            );
        }
// verify the required parameter 'count' is set
        if ($count === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $count when calling custidVendorsGet'
            );
        }
// verify the required parameter 'offset' is set
        if ($offset === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling custidVendorsGet'
            );
        }
// verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling custidVendorsGet'
            );
        }
$resourcePath = '/{custid}/vendors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
// query params
if ($orderby !== null) {
            $queryParams['orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
// query params
if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
// query params
if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
// header params
if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
// path params
if ($custid !== null) {
            $resourcePath = str_replace(
                '{' . 'custid' . '}',
                ObjectSerializer::toPathValue($custid),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation custidVendorsVendoridGet
*
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VendorDetails
     */
    public function custidVendorsVendoridGet($vendorid, $custid, $x_api_key)
    {
        list($response) = $this->custidVendorsVendoridGetWithHttpInfo($vendorid, $custid, $x_api_key);
        return $response;
    }

    /**
     * Operation custidVendorsVendoridGetWithHttpInfo
*
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VendorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function custidVendorsVendoridGetWithHttpInfo($vendorid, $custid, $x_api_key)
    {
        $returnType = '\Swagger\Client\Model\VendorDetails';
        $request = $this->custidVendorsVendoridGetRequest($vendorid, $custid, $x_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Swagger\Client\Model\VendorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Swagger\Client\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation custidVendorsVendoridGetAsync
     *
     * 
     *
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function custidVendorsVendoridGetAsync($vendorid, $custid, $x_api_key)
    {
        return $this->custidVendorsVendoridGetAsyncWithHttpInfo($vendorid, $custid, $x_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation custidVendorsVendoridGetAsyncWithHttpInfo
     *
     * 
     *
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function custidVendorsVendoridGetAsyncWithHttpInfo($vendorid, $custid, $x_api_key)
    {
        $returnType = '\Swagger\Client\Model\VendorDetails';
        $request = $this->custidVendorsVendoridGetRequest($vendorid, $custid, $x_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'custidVendorsVendoridGet'
     *
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function custidVendorsVendoridGetRequest($vendorid, $custid, $x_api_key)
    {
// verify the required parameter 'vendorid' is set
        if ($vendorid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendorid when calling custidVendorsVendoridGet'
            );
        }
// verify the required parameter 'custid' is set
        if ($custid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custid when calling custidVendorsVendoridGet'
            );
        }
// verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling custidVendorsVendoridGet'
            );
        }
$resourcePath = '/{custid}/vendors/{vendorid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// header params
if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
// path params
if ($vendorid !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorid' . '}',
                ObjectSerializer::toPathValue($vendorid),
                $resourcePath
            );
        }
// path params
if ($custid !== null) {
            $resourcePath = str_replace(
                '{' . 'custid' . '}',
                ObjectSerializer::toPathValue($custid),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation custidVendorsVendoridPackagesGet
*
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $orderby Valid values are relevance or packagename.  Default is relevance. (required)
* @param  int $count The maximum number of results to return in the response. (required)
* @param  int $offset Page Offset (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API.  Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  string $search Keyword search applied to limit the package list results.  The search term is contained in the package name.  When searching for packages without a search parameter, the sort options will be by packagename.  When the search parameter is not null, then the default sort is by relevance. (optional)
* @param  string $selection Limits the result set.  Valid values are all, selected, notselected and orderedthroughebsco.  It is also valid to use 0 for all, 1 for selected, 2 for notselected, or 3 for ordered through EBSCO.  When you filter by all(0), the total results count takes selected and not selected into consideration. (optional)
* @param  string $contenttype Limit by type of package content.  Valid values are all, aggregatedfulltext, abstractandindex, ebook, ejournal, print, unknown and onlinereference.  It is also valid to use 0 for all, 1 for aggregated full text, 2 for abstract and index, 3 for ebook, 4 for ejournal, 5 for print, 6 for unknown or 7 for online reference. (optional)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Packages
     */
    public function custidVendorsVendoridPackagesGet($vendorid, $custid, $orderby, $count, $offset, $x_api_key, $search = null, $selection = null, $contenttype = null)
    {
        list($response) = $this->custidVendorsVendoridPackagesGetWithHttpInfo($vendorid, $custid, $orderby, $count, $offset, $x_api_key, $search, $selection, $contenttype);
        return $response;
    }

    /**
     * Operation custidVendorsVendoridPackagesGetWithHttpInfo
*
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $orderby Valid values are relevance or packagename.  Default is relevance. (required)
* @param  int $count The maximum number of results to return in the response. (required)
* @param  int $offset Page Offset (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API.  Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  string $search Keyword search applied to limit the package list results.  The search term is contained in the package name.  When searching for packages without a search parameter, the sort options will be by packagename.  When the search parameter is not null, then the default sort is by relevance. (optional)
* @param  string $selection Limits the result set.  Valid values are all, selected, notselected and orderedthroughebsco.  It is also valid to use 0 for all, 1 for selected, 2 for notselected, or 3 for ordered through EBSCO.  When you filter by all(0), the total results count takes selected and not selected into consideration. (optional)
* @param  string $contenttype Limit by type of package content.  Valid values are all, aggregatedfulltext, abstractandindex, ebook, ejournal, print, unknown and onlinereference.  It is also valid to use 0 for all, 1 for aggregated full text, 2 for abstract and index, 3 for ebook, 4 for ejournal, 5 for print, 6 for unknown or 7 for online reference. (optional)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Packages, HTTP status code, HTTP response headers (array of strings)
     */
    public function custidVendorsVendoridPackagesGetWithHttpInfo($vendorid, $custid, $orderby, $count, $offset, $x_api_key, $search = null, $selection = null, $contenttype = null)
    {
        $returnType = '\Swagger\Client\Model\Packages';
        $request = $this->custidVendorsVendoridPackagesGetRequest($vendorid, $custid, $orderby, $count, $offset, $x_api_key, $search, $selection, $contenttype);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Swagger\Client\Model\Packages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Swagger\Client\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation custidVendorsVendoridPackagesGetAsync
     *
     * 
     *
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $orderby Valid values are relevance or packagename.  Default is relevance. (required)
* @param  int $count The maximum number of results to return in the response. (required)
* @param  int $offset Page Offset (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API.  Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  string $search Keyword search applied to limit the package list results.  The search term is contained in the package name.  When searching for packages without a search parameter, the sort options will be by packagename.  When the search parameter is not null, then the default sort is by relevance. (optional)
* @param  string $selection Limits the result set.  Valid values are all, selected, notselected and orderedthroughebsco.  It is also valid to use 0 for all, 1 for selected, 2 for notselected, or 3 for ordered through EBSCO.  When you filter by all(0), the total results count takes selected and not selected into consideration. (optional)
* @param  string $contenttype Limit by type of package content.  Valid values are all, aggregatedfulltext, abstractandindex, ebook, ejournal, print, unknown and onlinereference.  It is also valid to use 0 for all, 1 for aggregated full text, 2 for abstract and index, 3 for ebook, 4 for ejournal, 5 for print, 6 for unknown or 7 for online reference. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function custidVendorsVendoridPackagesGetAsync($vendorid, $custid, $orderby, $count, $offset, $x_api_key, $search = null, $selection = null, $contenttype = null)
    {
        return $this->custidVendorsVendoridPackagesGetAsyncWithHttpInfo($vendorid, $custid, $orderby, $count, $offset, $x_api_key, $search, $selection, $contenttype)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation custidVendorsVendoridPackagesGetAsyncWithHttpInfo
     *
     * 
     *
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $orderby Valid values are relevance or packagename.  Default is relevance. (required)
* @param  int $count The maximum number of results to return in the response. (required)
* @param  int $offset Page Offset (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API.  Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  string $search Keyword search applied to limit the package list results.  The search term is contained in the package name.  When searching for packages without a search parameter, the sort options will be by packagename.  When the search parameter is not null, then the default sort is by relevance. (optional)
* @param  string $selection Limits the result set.  Valid values are all, selected, notselected and orderedthroughebsco.  It is also valid to use 0 for all, 1 for selected, 2 for notselected, or 3 for ordered through EBSCO.  When you filter by all(0), the total results count takes selected and not selected into consideration. (optional)
* @param  string $contenttype Limit by type of package content.  Valid values are all, aggregatedfulltext, abstractandindex, ebook, ejournal, print, unknown and onlinereference.  It is also valid to use 0 for all, 1 for aggregated full text, 2 for abstract and index, 3 for ebook, 4 for ejournal, 5 for print, 6 for unknown or 7 for online reference. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function custidVendorsVendoridPackagesGetAsyncWithHttpInfo($vendorid, $custid, $orderby, $count, $offset, $x_api_key, $search = null, $selection = null, $contenttype = null)
    {
        $returnType = '\Swagger\Client\Model\Packages';
        $request = $this->custidVendorsVendoridPackagesGetRequest($vendorid, $custid, $orderby, $count, $offset, $x_api_key, $search, $selection, $contenttype);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'custidVendorsVendoridPackagesGet'
     *
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $orderby Valid values are relevance or packagename.  Default is relevance. (required)
* @param  int $count The maximum number of results to return in the response. (required)
* @param  int $offset Page Offset (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API.  Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  string $search Keyword search applied to limit the package list results.  The search term is contained in the package name.  When searching for packages without a search parameter, the sort options will be by packagename.  When the search parameter is not null, then the default sort is by relevance. (optional)
* @param  string $selection Limits the result set.  Valid values are all, selected, notselected and orderedthroughebsco.  It is also valid to use 0 for all, 1 for selected, 2 for notselected, or 3 for ordered through EBSCO.  When you filter by all(0), the total results count takes selected and not selected into consideration. (optional)
* @param  string $contenttype Limit by type of package content.  Valid values are all, aggregatedfulltext, abstractandindex, ebook, ejournal, print, unknown and onlinereference.  It is also valid to use 0 for all, 1 for aggregated full text, 2 for abstract and index, 3 for ebook, 4 for ejournal, 5 for print, 6 for unknown or 7 for online reference. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function custidVendorsVendoridPackagesGetRequest($vendorid, $custid, $orderby, $count, $offset, $x_api_key, $search = null, $selection = null, $contenttype = null)
    {
// verify the required parameter 'vendorid' is set
        if ($vendorid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendorid when calling custidVendorsVendoridPackagesGet'
            );
        }
// verify the required parameter 'custid' is set
        if ($custid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custid when calling custidVendorsVendoridPackagesGet'
            );
        }
// verify the required parameter 'orderby' is set
        if ($orderby === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderby when calling custidVendorsVendoridPackagesGet'
            );
        }
// verify the required parameter 'count' is set
        if ($count === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $count when calling custidVendorsVendoridPackagesGet'
            );
        }
// verify the required parameter 'offset' is set
        if ($offset === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling custidVendorsVendoridPackagesGet'
            );
        }
// verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling custidVendorsVendoridPackagesGet'
            );
        }
$resourcePath = '/{custid}/vendors/{vendorid}/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
// query params
if ($selection !== null) {
            $queryParams['selection'] = ObjectSerializer::toQueryValue($selection);
        }
// query params
if ($contenttype !== null) {
            $queryParams['contenttype'] = ObjectSerializer::toQueryValue($contenttype);
        }
// query params
if ($orderby !== null) {
            $queryParams['orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
// query params
if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
// query params
if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
// header params
if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
// path params
if ($vendorid !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorid' . '}',
                ObjectSerializer::toPathValue($vendorid),
                $resourcePath
            );
        }
// path params
if ($custid !== null) {
            $resourcePath = str_replace(
                '{' . 'custid' . '}',
                ObjectSerializer::toPathValue($custid),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation custidVendorsVendoridPut
*
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  \Swagger\Client\Model\UpdateVendorNonInheritedProxyPayload $body JSON payload to update a vendor with a non-inherited proxy. (optional)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function custidVendorsVendoridPut($vendorid, $custid, $x_api_key, $body = null)
    {
        $this->custidVendorsVendoridPutWithHttpInfo($vendorid, $custid, $x_api_key, $body);
    }

    /**
     * Operation custidVendorsVendoridPutWithHttpInfo
*
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  \Swagger\Client\Model\UpdateVendorNonInheritedProxyPayload $body JSON payload to update a vendor with a non-inherited proxy. (optional)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function custidVendorsVendoridPutWithHttpInfo($vendorid, $custid, $x_api_key, $body = null)
    {
        $returnType = '';
        $request = $this->custidVendorsVendoridPutRequest($vendorid, $custid, $x_api_key, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Swagger\Client\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation custidVendorsVendoridPutAsync
     *
     * 
     *
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  \Swagger\Client\Model\UpdateVendorNonInheritedProxyPayload $body JSON payload to update a vendor with a non-inherited proxy. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function custidVendorsVendoridPutAsync($vendorid, $custid, $x_api_key, $body = null)
    {
        return $this->custidVendorsVendoridPutAsyncWithHttpInfo($vendorid, $custid, $x_api_key, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation custidVendorsVendoridPutAsyncWithHttpInfo
     *
     * 
     *
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  \Swagger\Client\Model\UpdateVendorNonInheritedProxyPayload $body JSON payload to update a vendor with a non-inherited proxy. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function custidVendorsVendoridPutAsyncWithHttpInfo($vendorid, $custid, $x_api_key, $body = null)
    {
        $returnType = '';
        $request = $this->custidVendorsVendoridPutRequest($vendorid, $custid, $x_api_key, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'custidVendorsVendoridPut'
     *
* @param  int $vendorid Vendor ID (required)
* @param  string $custid EBSCO Customer ID (required)
* @param  string $x_api_key Unique code assigned by EBSCO to grant you access to this API.  The API key needs to be a header parameter for every operation in order to access this API. Your production API key will not grant you access to the API through the interactive documentation. You will need a sandbox API key to use the interactive documentation.  If you require a sandbox API key, please contact EBSCO customer support. (required)
* @param  \Swagger\Client\Model\UpdateVendorNonInheritedProxyPayload $body JSON payload to update a vendor with a non-inherited proxy. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function custidVendorsVendoridPutRequest($vendorid, $custid, $x_api_key, $body = null)
    {
// verify the required parameter 'vendorid' is set
        if ($vendorid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendorid when calling custidVendorsVendoridPut'
            );
        }
// verify the required parameter 'custid' is set
        if ($custid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custid when calling custidVendorsVendoridPut'
            );
        }
// verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling custidVendorsVendoridPut'
            );
        }
$resourcePath = '/{custid}/vendors/{vendorid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// header params
if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
// path params
if ($vendorid !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorid' . '}',
                ObjectSerializer::toPathValue($vendorid),
                $resourcePath
            );
        }
// path params
if ($custid !== null) {
            $resourcePath = str_replace(
                '{' . 'custid' . '}',
                ObjectSerializer::toPathValue($custid),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if (isset($body)) {
            $_tempBody = $body;
        }
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

/**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
